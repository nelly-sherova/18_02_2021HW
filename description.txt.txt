
Асинхронность позволяет вынести отдельные задачи из основного потока в специальные асинхронные методы 
или блоки кода.


Многопоточность 

При помощи многопоточности мы можем выделить в приложении несколько потоков, которые будут выполнять
различные задачи одновременно. Поток предствляет некоторую часть кода
программы, при выполнении которого каждому потоку выделяется определенный квант времени.
Если у нас, допустим, графическое приложение, которое посылает запрос к
какому-нибудь серверу или считывает и обрабатывает огромный файл, то без многопоточности у нас бы
блокировался графический интерфейс на время выполнения задачи. А благодаря потокам мы можем
выделить отправку запроса или любую другую задачу, которая может долго обрабатываться, в отдельный
поток. Поэтому, к примеру, клиент-серверные приложения (и не только они) практически не мыслимы без
многопоточности.

Параллельное программирование

-Параллельное программирование это способ программирования направленный на
одновренеменное решение нескольких задач с использованием нескольких 
вычислительных устройств, которые одновренеменно будут выполнять эти задачи.
То есть говорить о параллельном программировании на однопроцессорном 
устройстве нет смысла.

Синхронная модель это когда мы запускаем одну задачу и только после
её выполения можем запускать следующую задачу, прерывать или
останавливать задачу мы не можем.


Асинхронная же модель это позволяет делать. Мы можем запустить задачу,
остановить её, начать другую, потом третью, затем остановить и снова вернуться
в первой задаче.

Однопоточная модель это когда на выполнение задачи система выполняет 
одну абстрактную "рабочий поток", который может выполнять задачи как 
синхронно(по очереди), так и асинхронно

Многопоточная- то же самое, но система выделяет более одного потока.
Но важно понимать, что так как ресурсы процессора ограничены, 
то мы должны понимать сколько именно потоков выделять системе. то
есть это не должно быть чем-то динамичным.
Более подробная информация по ссылкам:

